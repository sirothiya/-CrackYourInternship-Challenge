3Sum
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Constraints:
0 <= nums.length <= 3000
-105 <= nums[i] <= 105

/////MY SOLUTION//

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
      int n=nums.size();
        int sum=0;int low,high;
        vector<vector<int>>ans;
        sort(nums.begin(),nums.end());
        if(n<3){
            return {};
        }
        for(int i=0;i<n-2;i++){
            if(i==0 ||(i>0 && nums[i]!=nums[i-1])){
                low=i+1;
                high=n-1;
                sum=nums[low]+nums[high];
                while(low<high){
                    if(sum== -nums[i]){
                        ans.push_back({nums[i],nums[low],nums[high]});
                        while(low<high && nums[low]==nums[low+1]) low++;
                        while(low<high && nums[high]==nums[high-1])high--;
                        low++;
                        high--;
                    }
                    else if(sum>-nums[i])
                        high--;
                    else if(sum<-nums[i])
                        low++;
                }
            }
        }
        return ans;
    }
};
